--------------------------------------------
Μέρος 1
--------------------------------------------

--Ερώτηση 1--
X=Z
Η ifftshift είναι αντίστροφη της fftshift οπότε η μία αναιρεί την άλλη, γι'αυτό είναι Χ=Ζ.

--Ερώτηση 2--
Χ=Ζ και Χ=Υ
Εδώ Ν=4 (άρτιο) οπότε η fftshift και η ifftshift δίνουν το ίδιο αποτέλεσμα, επομένως ισχύει και Χ=Υ.
Στην πρώτη περίπτωση όπου Ν=5 (περιττό) αυτό δεν ισχύει.

--Ερώτηση 3--
Γράφουμε κατευθείαν το x όπως προκύπτει από το ifftshift(xb):
clear all; close all; clc;
x=[5 4 3 2 1 1 2 3 4];
X=fft(x);
Xb=fftshift(X);
subplot (2,1,2); plot([-4:4],Xb);ylabel('Xb');

--------------------------------------------
Μέρος 2
--------------------------------------------

--Ερώτηση 1--
Τροποποιούμε την h ώστε να έχει μήκος 8192 (άρτιο) αντί 8193 (περιττό).
h=[h(middle:end) h(1:middle-1)];

--Ερώτηση 2--
Ορθογωνικό και hamming παράθυρο μήκους 256:
h256=h(middle+1-128:middle+129);
wh256=hamming(length(h256));
h_hamming256=h256.*wh256';

--Ερώτηση 3--
hpm128=firpm(128, [0 0.10 0.15 0.5]*2, [1 1 0 0]);
Οι λωβοί είναι πιο στενοί και πιο χαμηλά στο φίλτρο μήκους 128 και αργεί περισσότερο να πέσει ο κύριος λωβός.
Το σημαντικό είναι ότι οι λωβοί έχουν πέσει, και αυτό φαίνεται στο σήμα μετά την εφαρμογή του φίλτρου μεγαλύτερου μήκους, έχει λιγότερο θόρυβο.

--Ερώτηση 4--
hpm128new=firpm(128, [0 0.11 0.12 0.5]*2, [1 1 0 0]);
Με στενότερα όρια μειώνεται η αυστηρότητα του φίλτρου, επειδή προσεγγίζει περισσότερο το ορθογωνικό παράθυρο που είναι λιγότερο αποδοτικό.
Οι λωβοί είναι τώρα στα -30dB αντί στα -110dB που ήταν πριν. Για το λόγο αυτό έχει πιο πολύ θόρυβο το σήμα μετά το φιλτράρισμα.

--Ερώτηση 5--
Αντί για load sima εκτελούμε τις παρακάτω γραμμές
Fs=8192; Ts=1/Fs; T=1;
t=0:Ts:T-Ts;
A=1;
s=A*sin(2*pi*800*t)+A*sin(2*pi*1000*t)+A*sin(2*pi*2000*t)+A*sin(2*pi*3000*t);